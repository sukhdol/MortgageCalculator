@model MortgageCalculator.ViewModels.LoanFormViewModel
@{
    ViewBag.Title = "Mortgage Calculator";
}

<h2>Mortgage Calculator</h2>

@using (Html.BeginForm())
{
    <div class="row">
        <div class="col-lg-4">
            <h3>Loan Form</h3>
            <div class="form-group">
                <label for="MortgageAmount">Mortgage Amount</label>
                @Html.TextBoxFor(l => l.MortgageAmount, new { @class = "form-control", @Value = "" })
                @Html.ValidationMessageFor(l => l.MortgageAmount, null, new { @class = "text-danger" })
            </div>

            <div class="form-group">
                <label for="AnnualInterestRate">Annual Interest Rate</label>
                @Html.TextBoxFor(l => l.AnnualInterestRate, new { @class = "form-control", @Value = "" })
                @Html.ValidationMessageFor(l => l.AnnualInterestRate, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label for="AmortizationPeriod">Amortization Period (In Years)</label>
                @Html.TextBoxFor(l => l.AmortizationPeriod, new { @class = "form-control", @Value = "" })
                @Html.ValidationMessageFor(l => l.AmortizationPeriod, null, new { @class = "text-danger" })
            </div>

            <button type="button" class="btn btn-primary js-calculate">Calculate</button>
        </div>

        <div class="col-lg-8">
            <h3>Results</h3>
            <div class="form-group">
                <label for="Monthly Payment">Your Monthly Payment</label>
                @Html.TextBoxFor(l => l.MonthlyPayment, new { @class = "form-control", @readonly = true })
            </div>

            <button type="button" class="btn btn-primary js-loanSchedule" disabled="disabled">Show Loan Schedule</button>
            <button type="button" class="btn-link js-send-email" disabled="disabled">Send Results to Email</button>

            <h3 class="loanScheduleTitle">Loan Schedule</h3>
            <table id="loanSchedules" class="table table-hover loanSchedules">
                <thead>
                    <tr>
                        <th>Payment Number</th>
                        <th>Interest Paid</th>
                        <th>Principal Paid</th>
                        <th>Remaining Balance</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
}
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval");

    <script>
        $(document)
            .ready(function () {
                var currentLoan = {};

                $('.js-calculate')
                    .on('click',
                        function () {

                            var form = $('form');
                            $.validator.unobtrusive.parse(form);
                            form.validate();

                            if (form.valid()) {
                                var mortgageAmount = parseFloat($('#MortgageAmount').val());
                                var interestRate = parseFloat($('#AnnualInterestRate').val());
                                var amortizationPeriod = parseFloat($('#AmortizationPeriod').val());

                                var result = getMonthlyPayment(mortgageAmount, interestRate, amortizationPeriod);

                                $('#MonthlyPayment').val(result);

                                currentLoan.mortgageAmount = mortgageAmount;
                                currentLoan.annualInterestRate = interestRate;
                                currentLoan.amortizationPeriod = amortizationPeriod;
                                currentLoan.monthlyPayment = result;

                                addLoan(currentLoan);

                                var loanList = getLoanSchedule(currentLoan);

                                $('#loanSchedules')
                                    .DataTable({
                                        data: loanList,
                                        searching: false,
                                        columns: [
                                            { data: 'paymentNumber' },
                                            { data: 'interestPaid' },
                                            { data: 'principalPaid' },
                                            { data: 'remainingBalance' }
                                        ]
                                    });

                                $('#loanSchedules_wrapper').hide();
                                $('.js-loanSchedule').prop("disabled", false);
                                $('.js-send-email').prop("disabled", false);
                            }
                        });

                $('.js-loanSchedule')
                    .on('click',
                        function () {
                            var text = $(this).text();

                            $(this).text(text === "Show Loan Schedule" ? "Hide Loan Schedule" : "Show Loan Schedule");
                            $('.loanSchedules').toggle().css('width', '100%');
                            $('.loanScheduleTitle').toggle();
                            $('#loanSchedules_wrapper').toggle();
                        });

                $('.js-send-email')
                    .on('click',
                        function () {
                            var br = "<br />";
                            var recipientEmail = prompt("Please enter your email.");

                            if (recipientEmail !== null) {

                                var email = {};

                                email.recipientEmail = recipientEmail;
                                email.subject = "Mortgage Information for Monthly Payment: $" + currentLoan.monthlyPayment;
                                email.body = "<p>Hello User,</p>" + 
                                             "<p>Thank you for using Linus 7's Mortgage Calulator!</p>" + 
                                             "<p>You passed in the following parameters:</p>" + 
                                             "<ul>" +
                                             "<li><b>Mortgage Amount:</b> <i>$" + currentLoan.mortgageAmount + "</i></li>" +
                                             "<li><b>Annual Interest Rate:</b> <i>" + currentLoan.annualInterestRate + "%</i></li>" +
                                             "<li><b>Amortization Period:</b> <i>" + currentLoan.amortizationPeriod + " year/s</i></li></ul>" + 
                                             "<p>Your <b>Monthly Payment</b> is <i>$" + currentLoan.monthlyPayment + "</i>.</p>" +
                                             "<p>Regards,</p>" +
                                             "<p>Linus 7 Tech Team</p>";

                                sendEmail(email);
                            }

                        });

                function addLoan(loan) {
                    var url = '/api/loans/addloan/';

                    $.ajax({
                        url: url,
                        method: 'post',
                        data: loan
                    })
                        .done(function () {
                            alert('Successfully added mortgage!');
                        })
                        .fail(function () {
                            alert('Adding mortgage failed!');
                        });
                }

                function sendEmail(email) {
                    var url = '/api/emails/sendemail/';

                    $.ajax({
                        url: url,
                        method: 'post',
                        data: email
                    })
                        .done(function () {
                            alert('Successfully sent email!');
                        })
                        .fail(function () {
                            alert("Sending email failed");
                        });
                }

                function getMonthlyPayment(mortgageAmount, interestRate, amortizationPeriod) {

                    // first calculation of the equation/formula
                    // using BEDMAS from left to right (Parentheses first then exponent)
                    // FORMULA: (1 + (annualInterestRate/200)) ^ (1/6)
                    // this step is used twice in the equation (numerator and denominator)
                    var firstEquationCalculation = Math.pow((1 + (interestRate / 200.0)), (1.0 / 6.0));

                    // second calculation of the equation/formula
                    // FORMULA: (-12 * amortizationPeriod)
                    // used in the denominator
                    var denominatorExponent = (-12.0) * amortizationPeriod;

                    // final calculation for the numerator
                    // FORMULA: firstEquationCalculation - 1
                    var numerator = firstEquationCalculation - 1;

                    // final calculation for the denominator
                    // FORMULA: 1 - (  firstEquationCalculation ^ denominatorExponent ) )
                    var denominator = 1 - (Math.pow(firstEquationCalculation, denominatorExponent));

                    // final calculation of the formula
                    // Formula: mortgageAmount * (numerator/denominator)
                    var monthlyPayment = mortgageAmount * (numerator / denominator);

                    return Math.round(monthlyPayment * 100) / 100.0;
                }

                function getLoanSchedule(loan) {
                    var amortizationPeriod = loan.amortizationPeriod;
                    var interestRate = loan.annualInterestRate;

                    var monthlyPercentageRate = (Math.pow((1 + (interestRate / 200.0)), (1 / 6))) - 1;

                    var monthlyPayment = loan.monthlyPayment;
                    var remainingBalance = loan.mortgageAmount;

                    var loanList = [];
                    var length = 12 * amortizationPeriod;

                    for (var counter = 1; counter <= length; counter++) {
                        var loanSchedule = [];

                        var interestPaid = Math.round((monthlyPercentageRate * remainingBalance) * 100) / 100.0;
                        var principalPaid = Math.round((monthlyPayment - interestPaid) * 100) / 100.0;

                        if (remainingBalance < monthlyPayment) {
                            principalPaid = remainingBalance;
                        }

                        remainingBalance = Math.round((remainingBalance - principalPaid) * 100) / 100.0;

                        loanSchedule.paymentNumber = counter;
                        loanSchedule.interestPaid = interestPaid;
                        loanSchedule.principalPaid = principalPaid;
                        loanSchedule.remainingBalance = remainingBalance;


                        loanList[counter - 1] = loanSchedule;
                    }

                    return loanList;
                }
            })
    </script>
}
