@model MortgageCalculator.ViewModels.LoanFormViewModel
@{
    ViewBag.Title = "Mortgage Calculator";
}

<h2>Mortgage Calculator</h2>

@using (Html.BeginForm())
{
    <div class="row">
        <div class="col-lg-4">
            <h3>Loan Form</h3>
            <div class="form-group">
                <label for="MortgageAmount">Mortgage Amount</label>
                @Html.TextBoxFor(l => l.MortgageAmount, new { @class = "form-control", @Value = "" })
                @Html.ValidationMessageFor(l => l.MortgageAmount, null, new { @class = "text-danger" })
            </div>

            <div class="form-group">
                <label for="AnnualInterestRate">Annual Interest Rate</label>
                @Html.TextBoxFor(l => l.AnnualInterestRate, new { @class = "form-control", @Value = "" })
                @Html.ValidationMessageFor(l => l.AnnualInterestRate, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label for="AmortizationPeriod">Amortization Period (In Years)</label>
                @Html.TextBoxFor(l => l.AmortizationPeriod, new { @class = "form-control", @Value = "" })
                @Html.ValidationMessageFor(l => l.AmortizationPeriod, null, new { @class = "text-danger" })
            </div>

            <button type="button" class="btn btn-primary js-calculate">Calculate</button>
        </div>

        <div class="col-lg-8">
            <h3>Results</h3>
            <div class="form-group">
                <label for="Monthly Payment">Your Monthly Payment</label>
                @Html.TextBoxFor(l => l.MonthlyPayment, new { @class = "form-control", @readonly = true })
            </div>

            <button type="button" class="btn btn-primary js-loanSchedule" disabled="disabled">Show Loan Schedule</button>
            <button type="button" class="btn-link js-send-email" disabled="disabled">Send Results to Email</button>

            <h3 class="loanSchedulesTitle">Loan Schedule</h3>
            <table id="loanSchedules" class="table table-hover loanSchedules">
                <thead>
                    <tr>
                        <th>Payment Number</th>
                        <th>Interest Paid</th>
                        <th>Principal Paid</th>
                        <th>Remaining Balance</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
}
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval");

    <script>
        $(document)
            .ready(function () {
                var currentLoan = {};

                $('.js-calculate')
                    .on('click',
                        function () {

                            // Check form's validations from the Data Annotations
                            // decorated in the LoanFormViewModel class
                            var form = $('#MortgageAmount').closest('form');
                            $.validator.unobtrusive.parse(form);
                            form.validate();

                            if (form.valid()) {
                                var mortgageAmount = parseFloat($('#MortgageAmount').val());
                                var interestRate = parseFloat($('#AnnualInterestRate').val());
                                var amortizationPeriod = parseFloat($('#AmortizationPeriod').val());

                                // Assign the calculated monthly payment to the result variable
                                var result = getMonthlyPayment(mortgageAmount, interestRate, amortizationPeriod);

                                $('#MonthlyPayment').val(result);

                                currentLoan.mortgageAmount = mortgageAmount;
                                currentLoan.annualInterestRate = interestRate;
                                currentLoan.amortizationPeriod = amortizationPeriod;
                                currentLoan.monthlyPayment = result;

                                // Add the calculated mortgage parameters in the database
                                addLoan(currentLoan);

                                // Assign the calculated Loan Schedule to the loanlist variable
                                var loanList = getLoanSchedule(currentLoan);

                                // Pass the loan list to the loanSchedules table
                                // to create a jQuery DataTable
                                $('#loanSchedules')
                                    .DataTable({
                                        destroy: true,
                                        data: loanList,
                                        searching: false,
                                        columns: [
                                            { data: 'paymentNumber' },
                                            { data: 'interestPaid' },
                                            { data: 'principalPaid' },
                                            { data: 'remainingBalance' }
                                        ]
                                    });

                                // refresh the .js-loanSchedule button and
                                // hide the loanSchedules table
                                refresh();

                                $('.js-loanSchedule').prop("disabled", false);
                                $('.js-send-email').prop("disabled", false);
                            }
                        });

                $('.js-loanSchedule')
                    .on('click',
                        function () {
                            var text = $(this).text();

                            $(this).text(text === "Show Loan Schedule" ? "Hide Loan Schedule" : "Show Loan Schedule");
                            $('.loanSchedulesTitle').toggle();
                            $('.loanSchedules').toggle().css('width', '100%');
                            $('#loanSchedules_wrapper').toggle();
                        });

                $('.js-send-email')
                    .on('click',
                        function () {
                            var recipientEmail = prompt("Please enter your email.");;

                            // Ask for the user's email address until
                            // they provide a valid email address or press Cancel
                            while (!isValidEmailAddress(recipientEmail) && recipientEmail !== null) {
                                alert('The email provided is invalid.');

                                recipientEmail = prompt("Please enter your email.");
                            }

                            if (recipientEmail !== null) {

                                var email = {};

                                email.recipientEmail = recipientEmail;
                                email.subject = "Mortgage Information for Monthly Payment: $" +
                                    currentLoan.monthlyPayment;
                                email.body = "<p>Hello User,</p>" +
                                    "<p>Thank you for using Linus 7's Mortgage Calulator!</p>" +
                                    "<p>You passed in the following parameters:</p>" +
                                    "<ul>" +
                                    "<li><b>Mortgage Amount:</b> <i>$" +
                                    currentLoan.mortgageAmount +
                                    "</i></li>" +
                                    "<li><b>Annual Interest Rate:</b> <i>" +
                                    currentLoan.annualInterestRate +
                                    "%</i></li>" +
                                    "<li><b>Amortization Period:</b> <i>" +
                                    currentLoan.amortizationPeriod +
                                    " year/s</i></li></ul>" +
                                    "<p>Your <b>Monthly Payment</b> is <i>$" +
                                    currentLoan.monthlyPayment +
                                    "</i>.</p>" +
                                    "<p>Regards,</p>" +
                                    "<p>Linus 7 Tech Team</p>";

                                sendEmail(email);
                            } else {
                                toastr.info('You cancelled your email request.');
                            }

                        });

                function refresh() {
                    $('.js-loanSchedule').text("Show Loan Schedule");
                    $('#loanSchedules_wrapper').toggle();
                    $('.loanSchedulesTitle').hide();
                    $('.loanSchedules').hide();
                }

                function addLoan(loan) {
                    var url = '/api/loans/addloan/';

                    $.ajax({
                        url: url,
                        method: 'post',
                        data: loan
                    })
                        .done(function () {
                            toastr.success('The loan has been added successfuly!');
                        })
                        .fail(function () {
                            toastr.error('Failed to add the loan');
                        });
                }

                function sendEmail(email) {
                    var url = '/api/emails/sendemail/';

                    $.ajax({
                        url: url,
                        method: 'post',
                        data: email
                    })
                        .done(function () {
                            toastr.success('The email was sent successfully!');
                        })
                        .fail(function () {
                            toastr.error('Failed to send the email!');
                        });
                }

                function isValidEmailAddress(emailAddress) {

                    // Regex pattern to check if the emailAddress passed in is valid email address
                    var pattern =
                        /^(([^<>()[\]\\.,;:\s@@\"]+(\.[^<>()[\]\\.,;:\s@@\"]+)*)|(\".+\"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

                    return pattern.test(emailAddress);
                }

                function getMonthlyPayment(mortgageAmount, interestRate, amortizationPeriod) {

                    // first calculation of the equation/formula
                    // using BEDMAS from left to right (Parentheses first then exponent)
                    // FORMULA: (1 + (annualInterestRate/200)) ^ (1/6)
                    // this step is used twice in the equation (numerator and denominator)
                    var firstEquationCalculation = Math.pow((1 + (interestRate / 200.0)), (1.0 / 6.0));

                    // second calculation of the equation/formula
                    // FORMULA: (-12 * amortizationPeriod)
                    // used in the denominator
                    var denominatorExponent = (-12.0) * amortizationPeriod;

                    // final calculation for the numerator
                    // FORMULA: firstEquationCalculation - 1
                    var numerator = firstEquationCalculation - 1;

                    // final calculation for the denominator
                    // FORMULA: 1 - (  firstEquationCalculation ^ denominatorExponent ) )
                    var denominator = 1 - (Math.pow(firstEquationCalculation, denominatorExponent));

                    // final calculation of the formula
                    // Formula: mortgageAmount * (numerator/denominator)
                    var monthlyPayment = mortgageAmount * (numerator / denominator);

                    return Math.round(monthlyPayment * 100) / 100.0;
                }

                function getLoanSchedule(loan) {
                    var amortizationPeriod = loan.amortizationPeriod;
                    var interestRate = loan.annualInterestRate;

                    // Calculate Monthly Percentage Rate
                    // FORMULA: ((1 + (interestRate/200)) ^ (1/6)) - 1
                    var monthlyPercentageRate = (Math.pow((1 + (interestRate / 200.0)), (1.0 / 6.0))) - 1;

                    var monthlyPayment = loan.monthlyPayment;
                    var remainingBalance = loan.mortgageAmount;

                    var loanList = [];

                    // Calculate the total months in the Amortization Period 
                    var length = 12 * amortizationPeriod;

                    for (var counter = 1; counter <= length; counter++) {
                        var loanSchedule = [];

                        // Calculate Interest Paid for the month
                        // FORMULA: monthlyPercentage * RemainingBalance
                        var interestPaid = Math.round((monthlyPercentageRate * remainingBalance) * 100) / 100.0;

                        // Calculate Principal Paid for the month
                        // FORMULA: monthlyPayment - interestPaid
                        var principalPaid = Math.round((monthlyPayment - interestPaid) * 100) / 100.0;

                        if (remainingBalance < monthlyPayment) {
                            principalPaid = remainingBalance;
                        }

                        // Calculate Remaining Mortgage Balance
                        // FORMULA: remainingBalance - principalPaid
                        remainingBalance = Math.round((remainingBalance - principalPaid) * 100) / 100.0;

                        loanSchedule.paymentNumber = counter;
                        loanSchedule.interestPaid = interestPaid;
                        loanSchedule.principalPaid = principalPaid;
                        loanSchedule.remainingBalance = remainingBalance;


                        loanList[counter - 1] = loanSchedule;
                    }

                    return loanList;
                }
            })
    </script>
}
